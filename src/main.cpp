/**
    \file
    \brief 
        OTUS C++ Professional Домашнее задание №6
    \details
        Спроектировать 2-мерную разреженную бесконечную матрицу, заполненную значениями по умолчанию.
        Матрица должна хранить только занятые элементы - значения которых хотя бы раз присваивались.
        Присвоение в ячейку значения по умолчанию освобождает ячейку.
        Необходимо уметь отвечать на вопрос - сколько ячеек реально занято?
        Необходимо уметь проходить по всем занятым ячейкам. Порядок не имеет значения. Возвращается позиция ячейки и ее значение.
        При чтении элемента из свободной ячейки возвращать значение по умолчанию.
*/

#include <iostream>
#include <cassert>

#include "matrix.hpp"

int main()
{
    /* ========== EXAMPLE ========== */

    // //  Бесконечная матрица int заполнена значениями -1 
    // Matrix<int, -1> matrix_0;
    // assert(matrix_0.size() == 0);   //  все ячейки свободны    

    // auto a = matrix_0[0][0];
    // assert(a == -1);
    // assert(matrix_0.size() == 0);

    // matrix_0[100][100] = 314;
    // assert(matrix_0[100][100] == 314);
    // assert(matrix_0.size() == 1);

    // //  выведется одна строка 
    // //  100100314
    // for(auto c: matrix_0) 
    // { 
    //     int x;
    //     int y;
    //     int v;
    //     std::tie(x, y, v) = c; 
    //     std::cout << x << y << v << std::endl; 
    // }

    /* ========== TASK ========== */

    const int default_value = 0;

    //  При запуске программы необходимо создать матрицу с пустым значением 0.
    Matrix<int, default_value> matrix;

    //  Заполнить главную диагональ матрицы (от [0,0] до [9,9]) значениями от 0 до 9.
    //  Второстепенную диагональ (от [0,9] до [9,0]) значениями от 9 до 0.
    for (int i = 0; i < 10; ++i) 
    {
        matrix[i][i] = i;
        matrix[i][9 - i] = 9 - i;
    }

    //  Необходимо вывести фрагмент матрицы от [1,1] до [8,8]. Между столбцами пробел.
    //  Каждая строка матрицы на новой строке консоли.
    for (int i = 1; i < 9; ++i)
        for (int j = 1; j < 9; ++j)
            std::cout << matrix[i][j] << ((j < 8) ? " " : "\n");

    //  Вывести количество занятых ячеек.
    std::cout << "Filled cells count = " << matrix.size() << std::endl;

    //  Вывести все занятые ячейки вместе со своими позициями.
    int pos_x, pos_y, value;
    for (auto cell: matrix)
    {
        std::tie(pos_x, pos_y, value) = cell;
        if (value != default_value)
            std::cout << "(" << pos_x << ";" << pos_y << ") = " << value << std::endl;
    }

    return 0;
}